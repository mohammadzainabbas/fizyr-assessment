name: CI - Rust

run-name: ðŸš€ ${{ github.workflow }}(${{ github.run_number }}) workflow deployed by @${{ github.actor }} on ${{ github.ref_name }} with event ${{ github.event_name }}

on:
  pull_request:
    branches: [main]
    paths: ['src/**', 'Cargo.lock', 'Cargo.toml', '.github/workflows/ci-rust.yml', 'docker-compose.yml', 'Dockerfile'] # Added workflow/docker files
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  # Define DATABASE_URL for integration tests (runner connects to host-exposed port)
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/air_quality

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  # Job for running unit tests (no external services needed)
  test:
    name: Unit Test
    needs: [check, fmt, clippy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Run unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          # No feature flags needed for unit tests by default

  # Job for running integration tests (requires database service)
  integration-test:
    name: Integration Test
    needs: [check, fmt, clippy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Start Database Service
        # Use 'docker compose' (space) instead of 'docker-compose' (hyphen)
        run: docker compose up -d database

      - name: Wait for Database Healthcheck
        # Waits for the healthcheck defined in docker-compose.yml to pass
        run: |
          echo "Waiting for database to be ready..."
          timeout=60 # seconds
          start_time=$(date +%s)
          # Loop until pg_isready succeeds or timeout is reached
          # Use 'docker compose' (space)
          while ! docker compose exec -T database pg_isready -U postgres -h localhost -p 5432 &>/dev/null; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
            if [ $elapsed_time -ge $timeout ]; then
              echo "Database did not become ready within $timeout seconds."
              docker compose logs database # Show logs for debugging (use 'docker compose')
              exit 1
            fi
            echo -n "."
            sleep 3 # Wait a bit between checks
          done
          echo "Database is ready!"

      - name: Run Integration Tests
        # Runs tests with the 'integration-tests' feature enabled
        # DATABASE_URL is inherited from the job's env context
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features integration-tests
        env:
           RUST_LOG: info # Enable logging during tests

      - name: Stop Services
        # This step runs even if the test step fails, ensuring cleanup
        if: always()
        # Use 'docker compose' (space)
        run: docker compose down