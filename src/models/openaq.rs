//! Defines data structures used throughout the application, including those for
//! deserializing OpenAQ API responses, representing data in the database,
//! and structuring results for display.

use chrono::{DateTime, Utc};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use sqlx::types::Decimal;

/// Represents the top-level structure of the OpenAQ API response for measurements.
#[derive(Debug, Deserialize)]
pub struct OpenAQMeasurementResponse {
    /// Metadata associated with the API response. Field renamed for deserialization.
    #[serde(rename = "meta")]
    pub _meta: Meta,
    /// The list of measurement results.
    pub results: Vec<Measurement>,
}

/// Contains metadata provided by the OpenAQ API, such as pagination info.
#[derive(Debug, Deserialize)]
pub struct Meta {
    #[serde(rename = "name")]
    pub _name: String,
    #[serde(rename = "license")]
    pub _license: String,
    #[serde(rename = "website")]
    pub _website: String,
    #[serde(rename = "page")]
    pub _page: i32,
    #[serde(rename = "limit")]
    pub _limit: i32,
    #[serde(rename = "found")]
    pub _found: i32,
}

/// Represents the top-level structure of the OpenAQ API response for countries (unused currently).
#[derive(Debug, Deserialize)]
pub struct OpenAQCountryResponse {
    #[serde(rename = "meta")]
    pub _meta: Meta,
    #[serde(rename = "results")]
    pub _results: Vec<Country>,
}

/// Represents country information as returned by the OpenAQ API (unused currently).
#[derive(Debug, Deserialize)]
pub struct Country {
    #[serde(rename = "code")]
    pub _code: String,
    #[serde(rename = "name")]
    pub _name: String,
    #[serde(rename = "locations")]
    pub _locations: i32,
    #[serde(rename = "count")]
    pub _count: i64,
}

/// Represents geographical coordinates (latitude and longitude).
#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct Coordinates {
    pub latitude: Option<f64>,
    pub longitude: Option<f64>,
}

/// Represents date and time information for a measurement, in both UTC and local time.
#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct Dates {
    /// The timestamp in UTC.
    pub utc: DateTime<Utc>,
    /// The timestamp in local time as a string (format may vary).
    pub local: String,
}

/// Represents the numerical value of a measurement (unused directly, part of `Measurement`).
#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct Value {
    pub value: f64,
}

/// Represents a single air quality measurement as returned by the OpenAQ API.
/// This is the primary structure used for API deserialization.
#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct Measurement {
    /// The unique identifier for the location. Field renamed for deserialization.
    #[serde(rename = "locationId")]
    pub location_id: i64,
    /// The name of the location.
    pub location: String,
    /// The measured parameter (e.g., "pm25", "o3").
    pub parameter: String,
    /// The measured value.
    pub value: f64,
    /// Date and time of the measurement.
    pub date: Dates,
    /// The unit of the measurement (e.g., "µg/m³").
    pub unit: String,
    /// Geographical coordinates of the location.
    pub coordinates: Option<Coordinates>,
    /// The 2-letter country code.
    pub country: String,
    /// The city name, if available.
    pub city: Option<String>,
}

/// Represents a measurement as stored in the PostgreSQL database.
/// Derives `sqlx::FromRow` for easy mapping from query results.
#[derive(Debug, Serialize, Clone, sqlx::FromRow)]
pub struct DbMeasurement {
    /// Primary key (auto-generated by the database).
    pub id: Option<i32>,
    pub location_id: i64,
    pub location: String,
    pub parameter: String,
    /// Measurement value stored as a precise Decimal type.
    pub value: Decimal,
    pub unit: String,
    pub date_utc: DateTime<Utc>,
    pub date_local: String,
    pub country: String,
    pub city: Option<String>,
    pub latitude: Option<f64>,
    pub longitude: Option<f64>,
}

/// Converts an API `Measurement` into a `DbMeasurement` suitable for database insertion.
impl From<Measurement> for DbMeasurement {
    fn from(m: Measurement) -> Self {
        Self {
            id: None, // ID is generated by the database
            location_id: m.location_id,
            location: m.location,
            parameter: m.parameter,
            // Convert f64 to Decimal, handling potential precision issues gracefully
            value: Decimal::from_f64(m.value).unwrap_or_default(),
            unit: m.unit,
            date_utc: m.date.utc,
            date_local: m.date.local,
            country: m.country,
            city: m.city,
            // Extract latitude and longitude from the nested Coordinates struct
            latitude: m.coordinates.as_ref().and_then(|c| c.latitude),
            longitude: m.coordinates.as_ref().and_then(|c| c.longitude),
        }
    }
}

/// Represents the latest measurement value for each pollutant within a specific city.
/// Used for the "Measurements by City" command output. Derives `sqlx::FromRow`.
#[derive(Debug, Clone, sqlx::FromRow)]
pub struct CityLatestMeasurements {
    /// The name of the city.
    pub city: String,
    /// Latest PM2.5 value (as Decimal).
    pub pm25: Option<Decimal>,
    /// Latest PM10 value (as Decimal).
    pub pm10: Option<Decimal>,
    /// Latest O3 value (as Decimal).
    pub o3: Option<Decimal>,
    /// Latest NO2 value (as Decimal).
    pub no2: Option<Decimal>,
    /// Latest SO2 value (as Decimal).
    pub so2: Option<Decimal>,
    /// Latest CO value (as Decimal).
    pub co: Option<Decimal>,
    /// Timestamp of the most recent measurement among all parameters for this city.
    pub last_updated: DateTime<Utc>,
}

/// Represents the calculated average air quality metrics for a country over a specific period.
/// Used for the "Average Air Quality" command output.
#[derive(Debug, Serialize, Clone)]
pub struct CountryAirQuality {
    pub country: String,
    pub avg_pm25: Option<f64>,
    pub avg_pm10: Option<f64>,
    pub avg_o3: Option<f64>,
    pub avg_no2: Option<f64>,
    pub avg_so2: Option<f64>,
    pub avg_co: Option<f64>,
    /// The total number of measurements used to calculate the averages.
    pub measurement_count: i64,
}

/// Represents the pollution ranking for a country based on a calculated index.
/// Used for the "Most Polluted Country" command output.
#[derive(Debug, Serialize, Clone)]
pub struct PollutionRanking {
    pub country: String,
    /// A calculated index representing overall pollution (higher is worse).
    pub pollution_index: f64,
    /// The average PM2.5 value used in the index calculation.
    pub pm25_avg: Option<f64>,
    /// The average PM10 value used in the index calculation.
    pub pm10_avg: Option<f64>,
}

impl PollutionRanking {
    /// Creates a default `PollutionRanking` instance for a country, typically used
    /// when no data is found.
    pub fn new(country: &str) -> Self {
        Self {
            country: country.to_string(),
            pollution_index: 0.0, // Default to 0 index
            pm25_avg: None,
            pm10_avg: None,
        }
    }
}
